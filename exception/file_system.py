class FolderError(Exception):
    """
    Исключение для обработки ошибок, связанных с некорректным названием папки.

    Сообщение:
    Указанное название папки не существует. Проверьте правильность названия и наличие папки.
    """
    def __init__(self) -> None:
        super().__init__(
            "Указанное название папки не существует. Проверьте правильность названия и наличие папки."
        )


class EmptyFolderError(Exception):
    """
    Исключение для обработки ситуации, когда на заданном уровне папки нет вложенных папок.

    Параметры:
    ----------
    folder : str
        Имя папки, в которой не найдено вложенных папок.

    Сообщение:
    На уровне папки '<folder>' не найдено вложенных папок.
    """
    def __init__(self, folder: str) -> None:
        super().__init__(f"На уровне папки '{folder}' не найдено вложенных папок.")


class DownloadTypeError(Exception):
    """
    Исключение для обработки ошибок неверного типа загрузки.

    Сообщение:
    Неверный тип загрузки. Доступные варианты: 'drive' или 'zip'.
    """
    def __init__(self) -> None:
        super().__init__(
            "Неверный тип загрузки. Доступные варианты: 'drive' или 'zip'."
        )


class DownloadError(Exception):
    """
    Исключение для обработки непредвиденных ошибок при загрузке.

    Параметры:
    ----------
    *args : str
        Дополнительное описание ошибки.

    Сообщение:
    Произошла непредвиденная ошибка. Описание: <args>.
    """
    def __init__(self, *args: str) -> None:
        super().__init__(f"Произошла непредвиденная ошибка. Описание: {' '.join(args)}")


class LabelError(Exception):
    """
    Исключение для обработки ошибок, связанных с недопустимыми файлами в папке 'label'.

    Параметры:
    ----------
    file : str
        Имя недопустимого файла.

    Сообщение:
    Папка 'label' содержит недопустимый файл: '<file>'.
    """
    def __init__(self, file: str) -> None:
        super().__init__(f"Папка 'label' содержит недопустимый файл: '{file}'.")


class TxtFileNotFoundError(Exception):
    """
    Исключение для обработки ошибок, когда файл .txt не найден в указанной директории.

    Параметры:
    ----------
    filename : str
        Имя искомого файла.
    label_dir : str
        Директория, где должен находиться файл.

    Сообщение:
    Файл '<filename>' не найден в папке '<label_dir>'. Операция прервана.
    """
    def __init__(self, filename: str, label_dir: str) -> None:
        super().__init__(
            f"Файл '{filename}' не найден в папке '{label_dir}'. Операция прервана."
        )


class NotEnoughImagesError(Exception):
    """
    Исключение для обработки ошибок при недостатке изображений в папке.

    Параметры:
    ----------
    source : str
        Путь к папке с изображениями.

    Сообщение:
    Папка '<source>' не содержит достаточного количества изображений для создания валидационной выборки. Операция прервана.
    """
    def __init__(self, source: str) -> None:
        super().__init__(
            f"Папка '{source}' не содержит достаточного количества изображений для создания валидационной выборки. Операция прервана."
        )

class NoTestDataError(Exception):
    """
    Исключение для обработки ошибок при отсутствии тестовых изображений.

    Сообщение:
    Директория не содержит тестовых изображений. Выполнение завершено.
    """
    def __init__(self):
        super().__init__(
            "Директория не содержит тестовых изображений. Выполнение завершено."
        )

class IncorrectDatasetFormatError(Exception):
    """
    Исключение для случаев, когда структура датасета некорректна.
    Отображает ожидаемые форматы для задач классификации и сегментации.
    """
    
    def __init__(self, message="Некорректная структура датасета."):
        super().__init__(message)
        self.message = message

    def __str__(self):
        return (
            f"{self.message}\n\n"
            "Ожидаемые структуры:\n"
            "\nКлассификация:\n"
            "dataset/\n"
            "├── class1/         # Директория для изображений первого класса\n"
            "│   ├── image1.jpg\n"
            "│   ├── image2.jpg\n"
            "│   └── ...\n"
            "├── class2/         # Директория для изображений второго класса\n"
            "│   ├── image1.jpg\n"
            "│   ├── image2.jpg\n"
            "│   └── ...\n"
            "└── ...\n"
            "\nСегментация:\n"
            "dataset/\n"
            "├── images/         # Директория с изображениями\n"
            "│   ├── image1.jpg\n"
            "│   ├── image2.jpg\n"
            "│   └── ...\n"
            "├── labels/         # Директория с разметкой\n"
            "│   ├── image1.txt  # Разметка для image1.jpg\n"
            "│   ├── image2.txt\n"
            "│   └── ...\n"
        )
